#include <iostream>
#include <string>
#include <unordered_map>
#include <set>

using namespace std;

struct WordNode {
    string word;        
    WordNode* next;     
    WordNode(string w) : word(w), next(nullptr) {}
};

struct WordList {
    WordNode* head;  

    WordList() : head(nullptr) {}

    void insertWord(const string& newWord) {
        WordNode* newNode = new WordNode(newWord);
        if (head == nullptr) {
            head = newNode;
        } else {
            WordNode* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    string findMostFrequentWord() {
        unordered_map<string, int> wordCount;
        WordNode* temp = head;
        while (temp != nullptr) {
            wordCount[temp->word]++;
            temp = temp->next;
        }

        string mostFrequent;
        int maxCount = 0;
        for (const auto& pair : wordCount) {
            if (pair.second > maxCount) {
                maxCount = pair.second;
                mostFrequent = pair.first;
            }
        }
        return mostFrequent;
    }

    void removeRedundantWords() {
        WordNode* temp = head;
        while (temp != nullptr && temp->next != nullptr) {
            if (temp->word == temp->next->word) {
                WordNode* redundantNode = temp->next;
                temp->next = temp->next->next;
                delete redundantNode;
            } else {
                temp = temp->next;
            }
        }
    }

    int countUniqueWords() {
        set<string> uniqueWords;
        WordNode* temp = head;
        while (temp != nullptr) {
            uniqueWords.insert(temp->word);
            temp = temp->next;
        }
        return uniqueWords.size();
    }

    void printWords() {
        WordNode* temp = head;
        while (temp != nullptr) {
            cout << temp->word << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    WordList wordList;

    wordList.insertWord("xanh");
    wordList.insertWord("xanh");
    wordList.insertWord("sang");
    wordList.insertWord("hien");
    wordList.insertWord("xanh");
    wordList.insertWord("hien");

    cout << "Danh sach cac tu ban dau: ";
    wordList.printWords();

    string mostFrequent = wordList.findMostFrequentWord();
    cout << "Tu xuat hien nhieu nhat: " << mostFrequent << endl;

    wordList.removeRedundantWords();
    cout << "Danh sach cac tu sau khi loai bo tu lay: ";
    wordList.printWords();

    int uniqueWordCount = wordList.countUniqueWords();
    cout << "So luong tu vung (khong trùng lặp): " << uniqueWordCount << endl;

    return 0;
}
